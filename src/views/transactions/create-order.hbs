{{!-- Head --}}
<title>Create Order</title>
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css"
    integrity="sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU" crossorigin="anonymous">
<link rel="stylesheet" href="/css/create-order.css">
<script src="//code.jquery.com/jquery-latest.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.8.0/dist/JsBarcode.all.min.js"></script>

{{!-- Body --}}
<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <div class="col-lg-12 mb-4 order-0">
            <div class="card">
                <h3 class="text-center pt-2">Create Order Form</h3>
                <div class="card-body">
                    <div class="joincontent">
                        <div class="progress" style="height: 5px;">
                            <div id="progresswizard" class="progress-bar" role="progressbar" style="width: 15%;"
                                aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        {{!-- Wizard --}}
                        <div class="circleblocks mb-5">
                            <div class="d-flex justify-content-around mb-3">
                                <div class="p-2 ">
                                    <div class="aboutblock">
                                        <div class="circulo activecirculo text-center"><i
                                                class="fas fa-shopping-cart"></i></div>
                                        <div class="title text-center">Add Product</div>
                                    </div>
                                </div>
                                <div class="p-2 ">
                                    <div class="addressblock">
                                        <div class="circulo text-center"><i class="far fa-id-card"></i></div>
                                        <div class="title text-center">Information</div>
                                    </div>
                                </div>
                                <div class="p-2 ">
                                    <div class="verifyblock">
                                        <div class="circulo text-center"><i class="fas fa-file-invoice-dollar"></i>
                                        </div>
                                        <div class="title text-center">Checkout</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {{!-- Product list --}}
                        <div class="container-xxl flex-grow-1 container-p-y pt-5 mt-5" id="product_list">
                            {{!-- Search filter --}}
                            <hr>
                            <h3>Product List</h3>
                            <div class="card">
                                <div class="card-datatable table-responsive">
                                    <div id="DataTables_Table_0_wrapper"
                                        class="dataTables_wrapper dt-bootstrap5 no-footer">
                                        <div class="row mx-2 p-2">
                                            <div class="col-md-12">
                                                <div
                                                    class="dt-action-buttons text-xl-end text-lg-start text-md-end text-start d-flex align-items-center justify-content-end flex-md-row flex-column mb-3 mb-md-0">
                                                    {{!-- Category --}}
                                                    <div class="col-md-6 product_category me-2">
                                                        <select id="ProductCategory" class="form-select text-capitalize"
                                                            onchange="filterTable()">
                                                            <option value="">Category</option>
                                                            <option value="Phone">Phone</option>
                                                            <option value="Accessories">Accessories</option>
                                                            <option value="Tablet">Tablet</option>
                                                        </select>
                                                    </div>
                                                    <!-- Search by name -->
                                                    <div id="DataTables_Table_0_filter" class="dataTables_filter me-2">
                                                        <label>
                                                            <input type="search" class="form-control"
                                                                placeholder="Search.."
                                                                aria-controls="DataTables_Table_0"
                                                                oninput="searchProduct(this.value)">
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        {{!-- Table --}}
                                        <div style="height: 450px; overflow-y: scroll;">
                                            <table
                                                class="datatables-products table border-top dataTable no-footer dtr-column collapsed"
                                                id="DataTables_Table_0" aria-describedby="DataTables_Table_0_info">
                                                <thead>
                                                    <tr>
                                                        {{!-- Barcode --}}
                                                        <th class="sorting" tabindex="0"
                                                            aria-controls="DataTables_Table_0" rowspan="1" colspan="1"
                                                            aria-label="barcode: activate to sort column ascending">
                                                            barcode</th>
                                                        {{!-- product --}}
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="DataTables_Table_0" rowspan="1" colspan="1"
                                                            aria-label="product: activate to sort column descending"
                                                            aria-sort="ascending">
                                                            product</th>
                                                        {{!-- category --}}
                                                        <th class="sorting" tabindex="0"
                                                            aria-controls="DataTables_Table_0" rowspan="1" colspan="1"
                                                            aria-label="category: activate to sort column ascending">
                                                            category</th>
                                                        {{!-- retail price --}}
                                                        <th class="sorting" tabindex="0"
                                                            aria-controls="DataTables_Table_0" rowspan="1" colspan="1"
                                                            aria-label="retail price: activate to sort column ascending">
                                                            retail
                                                            price</th>
                                                        {{!-- quantity --}}
                                                        <th class="sorting" tabindex="0"
                                                            aria-controls="DataTables_Table_0" rowspan="1" colspan="1"
                                                            aria-label="quantit: activate to sort column ascending">
                                                            quantity</th>
                                                        {{!-- action --}}
                                                        <th class="sorting" rowspan="1" colspan="1"
                                                            aria-label="Actions">
                                                            Actions</th>
                                                    </tr>
                                                </thead>

                                                <tbody>
                                                    {{#each products}}
                                                    <tr data-category="{{category}}" id="tr{{pid}}">
                                                        {{!-- barcode --}}
                                                        <td id="barcode" value="{{pid}}">
                                                            <svg id="barcode{{pid}}">
                                                                <script>
                                                                    var myIdFromNodeJS = {{ pid }};
                                                                    var pid = '#barcode' + myIdFromNodeJS
                                                                    JsBarcode(pid, myIdFromNodeJS, {
                                                                        fontSize: 15,
                                                                        width: 1, // Adjust the width to your desired value
                                                                        height: 35, // Adjust the height to your desired value
                                                                        background: "#ffffff",
                                                                        lineColor: "black",
                                                                        margin: 40,
                                                                        marginLeft: 40
                                                                    })
                                                                </script>
                                                            </svg>
                                                        </td>
                                                        {{!-- product --}}
                                                        <td class="sorting_1">
                                                            <div
                                                                class="d-flex justify-content-start align-items-center product-name">
                                                                <div class="avatar-wrapper">
                                                                    <div
                                                                        class="avatar avatar me-2 rounded-2 bg-label-secondary">
                                                                        <img src="{{{images.[0]}}}" alt="Product"
                                                                            class="rounded-2" id="img_product">
                                                                    </div>
                                                                </div>
                                                                <div class="d-flex flex-column">
                                                                    <h6 class="text-body text-nowrap mb-0"
                                                                        id="product_name">
                                                                        {{pro_name}}
                                                                    </h6>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        {{!-- Category --}}
                                                        <td>
                                                            <span class="text-truncate d-flex align-items-center">
                                                                <span
                                                                    class="avatar-sm rounded-circle d-flex justify-content-center align-items-center bg-label-info me-2">
                                                                    <i class="bx bx-mobile-alt"></i>
                                                                </span> {{category}}
                                                            </span>
                                                        </td>
                                                        {{!-- retail price --}}
                                                        <td class="dtr" id="retail_price">
                                                            $<span>{{formatCurrency retail_price}}</span></td>
                                                        {{!-- quantity --}}
                                                        <td id="quantity"><span>{{amount}}</span></td>
                                                        {{!-- actions --}}
                                                        <td class="dtr">
                                                            <div class="d-inline-block text-nowrap">
                                                                <a class="btn btn-primary btn-icon" href="#">
                                                                    <i class="bx bx-cart"></i>
                                                                </a>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    {{/each}}
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {{!-- Form --}}
                        <form method="POST" id="createOrderForm" style="margin-top:5rem;">
                            <div class="registration-content">
                                {{!-- Add Product Container--}}
                                <div id="aboutcont" data-progress="15%">
                                    <div class="row">
                                        <!-- Container for displaying the list of products -->
                                        <div id="cart-items-container">
                                            <h3>Cart Items</h3>
                                            <ul id="cart-items-list" class="list-group mb-3"></ul>
                                        </div>
                                    </div>
                                </div>

                                {{!-- Customer Information Container--}}
                                <div id="addrescont" data-progress="50%">
                                    <div class="row">
                                        <hr>
                                        <h3>Customer Information</h3>
                                        <div class="col-lg-12 mt-3">
                                            <div class="form-group">
                                                {{!-- Phone number --}}
                                                <label for="phone-input">Phone Number: <span
                                                        style="color: #cc1818;">*</span></label>
                                                <input type="tel" class="form-control form-control-lg" name="phone"
                                                    id="phone-input" placeholder="Enter Phone Number">
                                                <div id="customer-info-container">
                                                    <label for="full-name-input">Name: <span
                                                            style="color: #cc1818;">*</span></label>
                                                    <input type="text" id="full-name-input"
                                                        class="form-control form-control-lg"
                                                        placeholder="Enter Fullname" name="name">
                                                    <label for="address-input"> Address: <span
                                                            style="color: #cc1818;">*</span></label>
                                                    <input type="text" id="address-input"
                                                        class="form-control form-control-lg" placeholder="Enter Address"
                                                        name="address">
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>

                                {{!-- Checkout Container --}}
                                <div id="verifycont" data-progress="85%">
                                    <div class="row">
                                        <div class="col-lg-7 mt-3">
                                            {{!-- Customer Information --}}
                                            <div class="border rounded p-4 mb-3 pb-3" id="customer-infor">
                                            </div>
                                        </div>
                                        <div class="col-lg-5 mt-3">
                                            <div class="border rounded p-4 mb-3 pb-3">
                                                <h6>Order Details</h6>
                                                <!-- Order Details -->
                                                <dl class="row mb-0" id="order_details">
                                                </dl>

                                                <hr class="mx-n4">
                                                <dl class="row mb-0" id="total_order">
                                                </dl>
                                            </div>
                                            {{!-- Money Give - Money Back --}}
                                            <div class="form-group">
                                                <label for="money-give-input">Money Give: <span
                                                        style="color: #cc1818;">*</span></label>
                                                <input type="text" class="form-control form-control-lg"
                                                    name="money_give" id="money-give-input"
                                                    placeholder="Enter Money Give">

                                                <label for="money-back-input">Money Back: <span
                                                        style="color: #cc1818;">*</span></label>
                                                <input type="text" class="form-control form-control-lg"
                                                    name="money_back" id="money-back-input" disabled>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="alert alert-danger mt-3" role="alert" id="error-message"
                                        style="display: none;">
                                        Please add items to cart for continue!
                                    </div>
                                    {{!-- PRINT BILL --}}
                                    <div class="card invoice-preview-card" id="bill_to_print" style="display:none">
                                        <div class="card-body">
                                            <div
                                                class="d-flex justify-content-between flex-xl-row flex-md-column flex-sm-row flex-column p-sm-3 p-0">
                                                <div class="mb-xl-0 mb-4">
                                                    <div class="d-flex svg-illustration mb-3 gap-2"> <span
                                                            class="app-brand-text demo text-body fw-bold">Phone
                                                            Paradise</span> </div>
                                                    <p class="mb-1">19 Nguyen Huu Tho, District 7</p>
                                                    <p class="mb-1">Ho Chi Minh City</p>
                                                    <p class="mb-0">(+84)58 585 0724</p>
                                                </div>
                                                <div>
                                                    <h4>Invoice</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <hr class="my-0">
                                        <div class="card-body">
                                            <div class="row p-sm-3 p-0"> {{!-- Customer Information --}} <div
                                                    class="col-xl-6 col-md-12 col-sm-5 col-12 mb-xl-0 mb-md-4 mb-sm-0 mb-4"
                                                    id="customer_bill_print"> </div>
                                            </div>
                                        </div> {{!-- Product detail --}}
                                        <div class="table-responsive">
                                            <table class="table border-top m-0" id="bill_product">
                                                <thead>
                                                    <tr>
                                                        <th>Item</th>
                                                        <th>Cost</th>
                                                        <th>Qty</th>
                                                        <th>Price</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="detail_order_to_print"> </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    {{!-- END PRINT BILL --}}
                                </div>
                                <input type="hidden" id="customer_data" value="{{customers}}">

                                {{!-- Button --}}
                                <div class="d-flex justify-content-between mb-3 wizard-navigation mt-5">
                                    <div class="p-2"><button id="prevbtn" type="button"
                                            class="btn btn-outline-dark btn-lg">Previous</button></div>

                                    <div class="p-2"><button id="nextbtn" type="button"
                                            class="btn btn-primary btn-lg text-center">Next</button>
                                        <button id="submitForm" type="submit" class="btn btn-primary btn-lg ">Create
                                            Order</button>
                                    </div>
                                </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
        (function () {
            var wizard = {
                formstate: 0,
                emptyInputs: 0,
                inactiveSections: [1, 2],
                setInactiveSections: function () {
                    if (this.formstate === 0) {
                        this.inactiveSections = [1, 2];
                    } else if (this.formstate === 1) {
                        this.inactiveSections = [0, 2];
                    } else {
                        this.inactiveSections = [0, 1];
                    }
                },

                setInactiveCircles: function () {
                    if (this.formstate === 0) {
                        var inactiveCirclea = document.querySelector(this.circlesections[this.inactiveSections[0]]);
                        var inactiveCircleb = document.querySelector(this.circlesections[this.inactiveSections[1]]);
                        inactiveCirclea.classList.remove("activecirculo");
                        inactiveCircleb.classList.remove("activecirculo");
                    } else if (this.formstate === 1) {
                        var inactiveCircles = document.querySelector(this.circlesections[this.inactiveSections[1]]);
                        inactiveCircles.classList.remove("activecirculo");
                    }
                },

                formsections: ['#aboutcont', '#addrescont', '#verifycont'],
                circlesections: ['.aboutblock .circulo', '.addressblock .circulo', '.verifyblock .circulo'],
                prevbtn: 'prevbtn',
                nextbtn: 'nextbtn',

                initiateForm: function () {
                    var currsection = document.querySelector(this.formsections[this.formstate]);
                    var inactiveSecta = document.querySelector(this.formsections[this.inactiveSections[0]]);
                    var inactiveSectb = document.querySelector(this.formsections[this.inactiveSections[1]]);
                    var currcircle = document.querySelector(this.circlesections[this.formstate]);
                    var progressbar = document.querySelector('#progresswizard');
                    var currsectionprogress = currsection.getAttribute('data-progress');

                    progressbar.style.width = currsectionprogress;
                    currsection.style.display = "block";
                    inactiveSecta.style.display = "none";
                    inactiveSectb.style.display = "none";

                    if (this.formstate === 0) {
                        document.getElementById(this.prevbtn).style.display = "none";
                        document.getElementById('product_list').style.display = "inline-block";
                    } else {
                        document.getElementById('product_list').style.display = "none";
                        document.getElementById(this.prevbtn).style.display = "inline-block";
                    }

                    currcircle.classList.add("activecirculo");
                    this.setInactiveCircles();

                    if (this.formstate === 2) {
                        document.querySelector("#nextbtn").style.display = "none";
                        document.querySelector("#submitForm").style.display = "inline-block";
                    } else {
                        document.querySelector("#nextbtn").style.display = "inline-block";
                        document.querySelector("#submitForm").style.display = "none";
                    }
                },
                nextSection: function () {
                    this.validateInput();
                    if (this.emptyInputs === 0) {
                        if (this.formstate < 2) {
                            this.formstate++;
                            this.setInactiveSections();
                            wizard.initiateForm();
                        }
                    }
                },
                prevSection: function () {
                    if (this.emptyInputs === 0) {
                        if (this.formstate > 0) {
                            this.formstate--;
                            this.setInactiveSections();
                            wizard.initiateForm();
                        }
                    }
                },
                validateInput: function () {
                    var currsection = this.formsections[this.formstate];
                    var inputfields = document.querySelectorAll(currsection + " input");
                    this.emptyInputs = 0; // Reset the emptyInputs count

                    for (var i = 0; i < inputfields.length; i++) {
                        if (inputfields[i].value.length === 0) {
                            inputfields[i].classList.add("is-invalid");
                            this.emptyInputs++;
                        } else {
                            inputfields[i].classList.remove("is-invalid");
                        }
                    }
                },
                checkInput: function () {
                    var currsection = this.formsections[this.formstate];
                    var inputfields = document.querySelectorAll(currsection + " input");

                    for (var i = 0; i < inputfields.length; i++) {
                        var currElement = inputfields[i];
                        currElement.addEventListener('focusout', inputValidation, false);
                    }

                    function inputValidation(event) {
                        var currentInput = document.getElementById(event.target.id);

                        if (currentInput.value.length > 0) {
                            currentInput.classList.remove("is-invalid");
                            wizard.emptyInputs--;
                        }
                    }
                }
            };

            wizard.initiateForm();
            document.getElementById(wizard.nextbtn).addEventListener("click", function () { wizard.nextSection(); });
            document.getElementById(wizard.prevbtn).addEventListener("click", function () { wizard.prevSection(); });
            wizard.checkInput(); // Call checkInput() to set up the input validation
        })();

    $(document).ready(function () {
        if (localStorage.getItem('cart')) {
            updateCartItemsUI()
            updateOrderDetailsUI()
        }

        // Event listener for the cart icon
        $('.btn-icon').on('click', function (event) {
            event.preventDefault();
            // Get the product details from the clicked row
            var row = $(this).closest('tr');
            var productId = row.find('#barcode').text().trim();
            var productName = row.find('#product_name').text().trim();
            var retailPrice = row.find('#retail_price span').text().replace(',', '');
            var srcValue = row.find('#img_product').attr('src');
            var quantity = row.find('#quantity').text();

            // Check if the quantity is greater than 0
            if (quantity > 0) {
                // Create an object representing the product
                var product = {
                    id: productId,
                    name: productName,
                    price: retailPrice,
                    image: srcValue,
                    max_quantity: quantity
                };

                // Add the product to the cart
                addToCart(product);
            } else {
                // Handle the case where the quantity is 0 (e.g., display an error message)
                console.log('Cannot add product with quantity 0 to the cart.');
            }
        });

        // Function to add a product to the cart
        function addToCart(product) {
            // Check if the cart exists in the local storage
            if (localStorage.getItem('cart')) {
                // Retrieve the cart items from the local storage
                var cartItems = JSON.parse(localStorage.getItem('cart'));

                // Check if the product already exists in the cart
                var existingProduct = cartItems.find(function (item) {
                    return item.id === product.id;
                });

                if (existingProduct) {
                    // Product already exists in the cart, increment the quantity
                    existingProduct.quantity += 1;
                } else {
                    // Product does not exist in the cart, add it with quantity 1
                    product.quantity = 1;
                    cartItems.push(product);
                }

                // Update the cart items in the local storage
                localStorage.setItem('cart', JSON.stringify(cartItems));
            } else {
                // Cart does not exist in the local storage, create a new cart with the product
                product.quantity = 1;
                var cartItems = [product];
                localStorage.setItem('cart', JSON.stringify(cartItems));
            }
            // Update the UI to reflect the added product
            updateCartItemsUI();
            updateOrderDetailsUI();
        }

        // Function to update the UI with the cart items
        function updateCartItemsUI() {
            // Get the cart items from the local storage
            var cartItems = JSON.parse(localStorage.getItem('cart'));
            // Get the cart items container and list elements
            var cartItemsContainer = $('#cart-items-container');
            var cartItemsList = $('#cart-items-list');
            // Initialize total amount
            var totalAmount = 0;
            var totalItems = 0;
            // Clear the existing cart items
            cartItemsList.empty();

            cartItems.forEach(function (item) {
                // Calculate the total amount for this item
                var itemAmount = item.price * item.quantity;
                totalAmount += itemAmount;
                totalItems += item.quantity;
                var listItem = `
                    <li class="list-group-item">
                        <div class="d-flex gap-5">
                        <input type="text" hidden value=${item.id} id="product_ID">
                        <div class="flex-shrink-0 d-flex align-items-center">
                            <img src="${item.image}" class="w-px-100">
                        </div>
                        <div class="flex-grow-1">
                            <div class="row">
                            <div class="col-md-8">
                                <p class="me-3"><a href="javascript:void(0)" class="text-body fw-bold">${item.name}</a></p>
                                Quantity: <input type="number" class="form-control form-control-sm w-px-100 mt-2" value="${item.quantity}" min="1" max="200" id="qty">
                            </div>
                            <div class="col-md-4">
                                <div class="text-md-end">
                                    <div class="my-2 my-md-4 mb-md-5"><span class="text-primary">${formatCurrency(itemAmount)}</span></div>
                                    <button type="button" class="btn btn-sm btn-primary mt-md-3" id="btn-move-to-wishlist">Move to wishlist</button>
                                </div>
                            </div>
                            </div>
                        </div>
                        </div>
                    </li>
                `
                cartItemsList.append(listItem);
            });

            // Display the total amount
            var totalAmountElement = $('<h5>').addClass('mt-3 text-end').text(`Total Amount: ${formatCurrency(totalAmount)} (${totalItems} items)`);
            cartItemsList.append(totalAmountElement);
            // Store the cart items in an input element
            var cartItemsInput = $('<input>').attr('type', 'hidden').attr('name', 'cart-items').val(JSON.stringify(cartItems));
            cartItemsList.append(cartItemsInput);
            var totalAmountInput = $('<input>').attr('type', 'hidden').attr('name', 'total-amount').attr('id', 'total-amount-value').val(totalAmount)
            cartItemsList.append(totalAmountInput);

            // Show or hide the cart items container based on the cart items count
            if (cartItems.length > 0) {
                cartItemsContainer.show();
            } else {
                cartItemsContainer.hide();
            }
        }

        // Event listener for the "Move to wishlist" button
        $('#cart-items-list').on('click', '#btn-move-to-wishlist', function () {
            var listItem = $(this).closest('.list-group-item');
            var productId = listItem.find('#product_ID').val();

            // Remove the product from the cart
            removeFromCart(productId);

            // Remove the list item from the UI
            listItem.remove();

            // Update the UI to reflect the changes
            updateCartItemsUI();
            updateOrderDetailsUI();
        });

        // Function to remove a product from the cart
        function removeFromCart(productId) {
            // Check if the cart exists in the local storage
            if (localStorage.getItem('cart')) {
                // Retrieve the cart items from the local storage
                var cartItems = JSON.parse(localStorage.getItem('cart'));

                // Find the index of the product in the cart
                var productIndex = cartItems.findIndex(function (item) {
                    return item.id === productId;
                });

                if (productIndex !== -1) {
                    // Remove the product from the cart
                    cartItems.splice(productIndex, 1);
                    // Update the cart items in the local storage
                    localStorage.setItem('cart', JSON.stringify(cartItems));
                }
            }
        }

        // Event listener for quantity input changes
        $('#cart-items-list').on('change', '#qty', function () {
            var listItem = $(this).closest('.list-group-item');
            var productId = listItem.find('#product_ID').val();
            var quantity = parseInt($(this).val());

            // Update the quantity in the cart
            updateQuantity(productId, quantity);

            // Update the UI to reflect the changes
            updateCartItemsUI();
            updateOrderDetailsUI();
        });

        // Function to update the quantity in the cart
        function updateQuantity(productId, quantity) {
            // Check if the cart exists in the local storage
            if (localStorage.getItem('cart')) {
                // Retrieve the cart items from the local storage
                var cartItems = JSON.parse(localStorage.getItem('cart'));

                // Find the product in the cart
                var product = cartItems.find(function (item) {
                    return item.id === productId;
                });

                if (product) {
                    if (quantity >= 0 && quantity <= product.max_quantity) {
                        // Update the quantity
                        product.quantity = quantity;
                    } else {
                        // Handle the case where the updated quantity is invalid (e.g., display an error message)
                        console.log('Invalid quantity. Please enter a quantity between 0 and ' + product.max_quantity);
                    }
                    // Update the cart items in the local storage
                    localStorage.setItem('cart', JSON.stringify(cartItems));
                }
            }
        }

        function updateOrderDetailsUI() {
            // Get the cart items from the local storage
            var cartItems = JSON.parse(localStorage.getItem('cart'));

            var order_details = $('#order_details');
            var total_order = $('#total_order');
            var detail_order_to_print = $('#detail_order_to_print')
            // Initialize total amount & items
            var totalAmount = 0;
            var totalItems = 0;

            order_details.empty()
            total_order.empty()
            detail_order_to_print.empty()

            cartItems.forEach(function (item) {
                // Calculate the total amount for this item
                var itemAmount = item.price * item.quantity;

                var listItem = `
                        <dt class="col-9 fw-normal" id="name_product">${item.name} x ${item.quantity}</dt>
                        <dd class="col-3 text-end" id="price_product">${formatCurrency(itemAmount)}</dd>
                    `;

                order_details.append(listItem);

                var item_print = `
                        <tr>
                            <td class="text-nowrap">${item.name}</td>
                            <td class="text-nowrap">${formatCurrency(item.price)}</td>
                            <td>${item.quantity}</td>
                            <td>${formatCurrency(itemAmount)}</td>
                        </tr>
                `
                detail_order_to_print.append(item_print)
                // Update the total amount
                totalAmount += itemAmount;
                totalItems += item.quantity;
            });

            // Display the total amount
            var totalAmountElement = `
                            <dt class="col-6">Total (${totalItems} items)</dt>
                            <dd class="col-6 fw-medium text-end mb-0" id="total-amount">${formatCurrency(totalAmount)}</dd>
                        `;
            total_order.html(totalAmountElement);

            let total_print = `                                                 
                                <tr>
                                    <td colspan="2">
                                        <span>Thanks for your order!</span>
                                    </td>
                                    <td>
                                        <p class="mb-2">Quantity:</p>
                                        <p class="mb-2">Subtotal:</p>
                                        <p class="mb-2">Tax:</p>
                                        <p class="mb-0">Total:</p>
                                    </td>
                                    <td>
                                        <p>${totalItems} items</p>
                                        <p>${formatCurrency(totalAmount)}</p>
                                        <p>$0.00</p>
                                        <p>${formatCurrency(totalAmount)}</p>
                                    </td>
                                </tr>                                            
            `
            detail_order_to_print.append(total_print)
            // Show or hide the cart items container based on the cart items count
            if (cartItems.length > 0) {
                order_details.show();
                total_order.show();
            } else {
                order_details.hide();
                total_order.hide();
            }
        }

        function updateCustomerInforUI() {
            var customer_infor = $('#customer-infor')
            var customer_bill_print = $('#customer_bill_print')
            var phone = $('#phone-input').val()
            var fullname = $('#full-name-input').val()
            var address = $('#address-input').val()

            if (phone && fullname && address) {
                var html = `
                    <h6>Customer Information</h6>
                    <dl class="row mb-0">
                        <dt class="col-4 fw-normal">Name</dt>
                        <dd class="col-8 text-end">${fullname}</dd>

                        <dt class="col-4 fw-normal">Phone</dt>
                        <dd class="col-8 text-end">${phone}</dd>

                        <dt class="col-4 fw-normal">Address</dt>
                        <dd class="col-8 text-end">${address}</dd>
                    </dl>
                `

                var bill_print = `
                    <h6 class="pb-2">Invoice To:</h6>
                    <p class="mb-1">${fullname}</p>
                    <p class="mb-1">${phone}</p>
                    <p class="mb-0">${address}</p>
                `
                customer_infor.html(html)
                customer_bill_print.html(bill_print)
            }
        }

        document.getElementById('nextbtn').addEventListener('click', updateCustomerInforUI);

        document.getElementById('money-give-input').addEventListener('change', calculateMoneyBack)

        function calculateMoneyBack() {
            // Get the entered money give value
            var moneyGiveInput = document.getElementById('money-give-input');
            var moneyGive = parseFloat(moneyGiveInput.value);
            var moneyBackInput = document.getElementById('money-back-input');

            const cartData = localStorage.getItem('cart');
            if (!cartData || cartData.trim() === '') {
                moneyGiveInput.value = '';  // Clear the "Money Give" input value
            } else {
                // Calculate the money back amount
                var totalAmount = parseFloat(document.getElementById('total-amount-value').value);
                var moneyBack = moneyGive - totalAmount;

                if (moneyBack < 0) {
                    moneyBackInput.value = '';
                    moneyGiveInput.value = '';  // Clear the "Money Give" input value
                    moneyGiveInput.focus();  // Set focus back to the "Money Give" input else {
                } else {
                    moneyBackInput.value = formatCurrency(moneyBack)
                }
            }
        };

        // Get the "Create Order" button element
        const form = document.getElementById('createOrderForm');

        function printBill() {
            // Print the bill
            let bill = document.getElementById('bill_to_print').outerHTML;
            bill = bill.replace('style="display:none"', '');
            let html = `<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
                <link rel="stylesheet" href="/vendor/css/core.css" class="template-customizer-core-css" />
                ${bill}`;

            let newWindow = window.open("about:blank", "_blank");
            newWindow.document.write(html);
            newWindow.document.close();
            setTimeout(function () {
                newWindow.print();
                newWindow.close();
            }, 1000);
        }

        // Add an event listener for form submission
        form.addEventListener('submit', function (event) {
            // Prevent the default form submission
            event.preventDefault();

            // Perform form validation
            if (validateForm()) {
                printBill()
                // Set cart is empty
                localStorage.setItem('cart', '')
                form.submit();
            }
        });

        // Function to validate the form
        function validateForm() {
            // Get the input values
            const moneyGiveInput = document.getElementById('money-give-input');
            const errorMessageContainer = document.getElementById('error-message');

            // Validate the inputs
            let isValid = true;

            // Validate phone number
            if (moneyGiveInput.value.trim() === '') {
                isValid = false;
                moneyGiveInput.classList.add('is-invalid');
            } else {
                moneyGiveInput.classList.remove('is-invalid');
            }

            // Check if cart is empty
            const cartData = localStorage.getItem('cart');
            if (!cartData || cartData.trim() === '') {
                isValid = false;
                errorMessageContainer.style.display = 'block';
                setTimeout(function () {
                    errorMessageContainer.style.display = 'none';
                }, 3000); v
            } else {
                errorMessageContainer.style.display = 'none'; // Hide the error message
            }

            return isValid;
        }
    });

    // Function to format a number as currency
    function formatCurrency(amount) {
        // Format the amount as currency (e.g., $1,000.00)
        var formattedAmount = '$ ' + parseInt(amount).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');

        // Remove the decimal part if it is .00
        formattedAmount = formattedAmount.replace(/\.00$/, '');

        return formattedAmount;
    }

    var customerData = getCustomerData();

    function getCustomerData() {
        var customerDataInput = document.getElementById('customer_data');
        var customerDataValue = customerDataInput.value
        // Remove newline characters and trim the string
        const formattedString = customerDataValue.replace(/\n/g, '').trim();
        // Replace new ObjectId() with a placeholder string
        const modifiedString = customerDataValue.replace(/new ObjectId\("[^"]+"\)/g, '"id"');
        const jsonString = modifiedString.replace(/(\w+)(:)/g, '"$1"$2').replace(/'/g, '"').replace(/PLACEHOLDER/g, '"$&"')
        const data = `[${jsonString}]`
        return JSON.parse(data)
    }

    // Event listener for the phone number input
    document.getElementById('phone-input').addEventListener('change', checkCustomerData);

    function checkCustomerData() {
        var phoneNumber = document.getElementById('phone-input').value;
        var customer = customerData.find(function (customer) {
            return customer.phone === phoneNumber;
        });

        var fullNameInput = document.getElementById('full-name-input');
        var addressInput = document.getElementById('address-input');

        if (customer) {
            fullNameInput.value = customer.name;
            fullNameInput.disabled = true;
            fullNameInput.classList.remove('is-invalid')
            addressInput.value = customer.address;
            addressInput.disabled = true;
            addressInput.classList.remove('is-invalid')
        } else {
            fullNameInput.value = '';
            fullNameInput.disabled = false;
            addressInput.value = '';
            addressInput.disabled = false;
        }
    }

    //filter table by category
    function filterTable() {
        var category = document.getElementById("ProductCategory").value;
        var rows = document.querySelectorAll("#DataTables_Table_0 tbody tr, #printTableContainer tbody tr");

        rows.forEach(function (row) {
            var rowCategory = row.getAttribute("data-category");
            row.style.display = (category === "" || rowCategory === category) ? "" : "none";
        });
    }

    function searchProduct(searchValue) {
        const rows = document.querySelectorAll('#DataTables_Table_0 tbody tr');

        rows.forEach(row => {
            const nameElement = row.querySelector('.product-name h6');
            const barcodeElement = row.querySelector('#barcode');
            const name = nameElement.textContent.toLowerCase();
            const barcode = barcodeElement.textContent.toLowerCase();

            if (name.includes(searchValue.toLowerCase()) || barcode.includes(searchValue.toLowerCase())) {
                row.style.display = ''; // Show the row
            } else {
                row.style.display = 'none'; // Hide the row
            }
        });
    }
</script>